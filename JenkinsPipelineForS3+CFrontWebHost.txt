pipeline {
    agent any
    stages {
        stage('Get User Input') {
            steps {
                script {
                    // Prompt user for input
                    def userInput = input(
                        id: 'userInput', // an id for this input step
                        message: 'Please provide the following inputs:',
                        parameters: [
                            string(name: 'S3_BUCKET', description: 'Enter S3 Bucket Name'),
                            string(name: 'S3_ARN', description: 'Enter S3 Bucket ARN'),
                            string(name: 'CLOUDFRONT_DISTRIBUTION_ID', description: 'Enter CloudFront Distribution ID'),
                            string(name: 'GITHUB_REPO', description: 'Enter GitHub Repository URL')
                        ]
                    )
                    
                    // Set environment variables based on user input
                    env.S3_BUCKET = userInput.S3_BUCKET
                    env.S3_ARN = userInput.S3_ARN
                    env.CLOUDFRONT_DISTRIBUTION_ID = userInput.CLOUDFRONT_DISTRIBUTION_ID
                    env.GITHUB_REPO = userInput.GITHUB_REPO
                }
            }
        }

        stage('Clone GitHub Repository') {
            steps {
                script {
                    echo "Removing existing repository directory if it exists..."
                    sh "rm -rf /home/ubuntu/myRepo"
                    echo "Cloning GitHub repository..."
                    sh "git clone ${env.GITHUB_REPO} /home/ubuntu/myRepo"
                }
            }
        }

        stage('Check S3 Bucket for Files') {
            steps {
                script {
                    def fileCount = sh(script: "aws s3 ls s3://${env.S3_BUCKET} --recursive | wc -l", returnStdout: true).trim()
                    if (fileCount.toInteger() > 0) {
                        echo "S3 bucket is not empty. Proceeding to empty the bucket."
                    } else {
                        echo "S3 bucket is already empty. Proceeding to the next stage."
                    }
                }
            }
        }

        stage('Empty S3 Bucket if Not Empty') {
            when {
                expression {
                    def fileCount = sh(script: "aws s3 ls s3://${env.S3_BUCKET} --recursive | wc -l", returnStdout: true).trim()
                    return fileCount.toInteger() > 0
                }
            }
            steps {
                script {
                    echo "Emptying the S3 bucket..."
                    sh "aws s3 rm s3://${env.S3_BUCKET} --recursive"
                }
            }
        }

        stage('Upload Files to S3 Bucket') {
            steps {
                script {
                    echo "Uploading files to S3 bucket..."
                    // Copy only the contents of the cloned repository
                    sh "aws s3 sync /home/ubuntu/myRepo/ s3://${env.S3_BUCKET} --exclude 'Jenkinsfile'"
                }
            }
        }

        stage('Output S3 Bucket Website Endpoint') {
            steps {
                script {
                    // Attempt to get the website configuration
                    def websiteConfig = sh(script: "aws s3api get-bucket-website --bucket ${env.S3_BUCKET} --output json || echo 'No website configuration found'", returnStdout: true).trim()

                    if (websiteConfig.contains("NoSuchWebsiteConfiguration")) {
                        echo "Website is not configured for bucket ${env.S3_BUCKET}."
                    } else {
                        // If the configuration exists, construct the endpoint URL
                        def websiteUrl = "http://${env.S3_BUCKET}.s3-website-us-east-1.amazonaws.com"
                        echo "S3 Bucket Website Endpoint: ${websiteUrl}"
                    }
                }
            }
        }

        stage('Invalidate CloudFront Distribution') {
            steps {
                script {
                    echo "Invalidating CloudFront distribution..."
                    // Create an invalidation for the CloudFront distribution
                    def invalidationResponse = sh(script: """
                        aws cloudfront create-invalidation --distribution-id ${env.CLOUDFRONT_DISTRIBUTION_ID} --paths '/*'
                    """, returnStdout: true).trim()
                    echo "Invalidation response: ${invalidationResponse}"
                }
            }
        }

        stage('Output CloudFront Distribution Link') {
            steps {
                script {
                    echo "Retrieving CloudFront distribution domain name..."
                    // Use grep to get the DomainName directly from the AWS CLI command
                    def domainName = sh(script: """
                        aws cloudfront get-distribution --id ${env.CLOUDFRONT_DISTRIBUTION_ID} --output json | grep DomainName | awk -F '\"' '{print \$4}'
                    """, returnStdout: true).trim()

                    echo "CloudFront Distribution Domain Name: ${domainName}"
                    echo "CloudFront Distribution Link: ${domainName}" // Changed to output just the domain name
                }
            }
        }
    }
}
